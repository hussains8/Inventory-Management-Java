trigger:
- main

variables:
  # 📁 Project Configuration
  backend_path: 'backend'                         # Relative path to Java backend
  java_version: '17'                              # Java version to use

  # 🐳 Docker Image Configuration
  acr_name: 'aadevtestacr3334'                         # e.g., myacrregistry
  acr_login_server: ''      # e.g., myacrregistry.azurecr.io
  docker_image_name: 'backend-service'            # Docker image name
  docker_image_tag: '$(Build.BuildId)'            # Tag using Build ID

stages:

# =========================================
# 🔧 Build Java App & Push Docker to ACR
# =========================================
- stage: BuildAndPushDockerImage
  displayName: 'Build Java App and Push Docker Image to ACR'
  jobs:
  - deployment: DockerImageBuild
    displayName: 'Build and Push Docker Image'
    environment:
      name: dev-test
      resourceName: aadopagent-vm
      resourceType: virtualMachine
    strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self

            # ✅ Install Java 17 and Maven if not available
            - script: |
                echo "Installing Java 17 and Maven..."
                sudo apt-get update
                sudo apt-get install -y openjdk-17-jdk maven
              displayName: 'Install Java 17 and Maven'

            # ✅ Compile Java Code
            - script: |
                echo "Compiling Java Backend..."
                cd $(backend_path)
                mvn clean package -Dmaven.test.skip=true
              displayName: 'Build Java Backend'
            - task: Docker@2
              inputs:
                containerRegistry: 'ADO-ACR-Connection'
                command: 'login'
            - task: Docker@2
              displayName: 'Build Docker Image'
              inputs:
                containerRegistry: 'ADO-ACR-Connection'
                repository: 'inventory-management-backend'
                command: 'build'
                Dockerfile: '$(System.DefaultWorkingDirectory)/backend/Dockerfile'
                tags: |
                  $(docker_image_tag)